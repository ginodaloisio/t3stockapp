// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    prices        Prices[]
    Images        Images[]
    Sales         Sales[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    brand     Brands    @default(GENERAL)
    prices    Prices[]
    title     String
    content   String
    type      String?   @default("Todos")
    height    Int?
    width     Int?
    length_   Int?
    amount    Int       @default(1)
    published Boolean   @default(true)
    viewCount Int       @default(0)
    author    User?     @relation(fields: [authorId], references: [id])
    authorId  String?
    images    Images[]
    sales     Sales[]
}

model Prices {
    id        String   @id @default(cuid())
    price     Int
    createdAt DateTime @default(now())
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Sales {
    id          String   @id @default(cuid())
    price       Int
    soldAt      DateTime @default(now())
    author      User     @relation(fields: [authorEmail], references: [email])
    authorEmail String
    amount      Int
    item        Post     @relation(fields: [itemId], references: [id])
    itemId      String
    receiptId   String?
    buyer       String
}

model Images {
    id        String   @id @default(cuid())
    title     String?
    url       String
    createdAt DateTime @default(now())
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

enum Brands {
    GENERAL
    VALENZIANA
    FRANCOVALENTE
    SIMMONS
    CANNON
}
